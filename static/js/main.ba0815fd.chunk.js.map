{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","items","isLoaded","fetch","then","res","json","setState","this","className","console","log","articles","map","item","key","url","target","href","style","backgroundImage","author","urlToImage","slice","title","content","description","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oJAAAA,EAAOC,QAAU,IAA0B,kC,qICgE5BC,G,wBAzDd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CACZC,MAAO,GACPC,UAAU,GAJO,E,iFAQE,IAAD,OACnBC,MAAM,mIACJC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACL,EAAKC,SAAS,CACbL,UAAU,EACVD,MAAOK,S,+BAOD,IAAD,EAEkBE,KAAKR,MAAzBE,EAFE,EAEFA,SAAUD,EAFR,EAEQA,MAChB,OAAKC,EAKH,yBAAKO,UAAU,uBACbC,QAAQC,IAAIV,EAAMW,UAClBX,EAAMW,SAASC,KAAI,SAACC,GAAD,OACnB,yBAAKL,UAAU,kBAAkBM,IAAKD,EAAKE,KAC1C,yBAAKP,UAAU,2BACd,uBAAGQ,OAAO,SAASC,KAAMJ,EAAKE,IAAKP,UAAU,MAC5CU,MAAO,CAAEC,gBAAgB,OAAD,OAAuB,iBAAdN,EAAKO,OAA2B,UAAYP,EAAKQ,WAAWC,MAAM,IAAMT,EAAKQ,WAAtF,QACzB,yBAAKb,UAAU,YACd,wBAAIA,UAAU,QAAO,uBAAGQ,OAAO,SAASC,KAAMJ,EAAKE,KAAMF,EAAKU,QAC9D,yBAAKf,UAAU,aACd,uBAAGA,UAAU,QACZ,8BAAM,uBAAGA,UAAU,uBAAnB,gBACA,8BAAM,uBAAGS,KAAMJ,EAAKE,KAAK,uBACxBP,UAAU,uBADL,eAIR,uBAAGA,UAAU,QAAwB,OAAhBK,EAAKW,QAAkBX,EAAKY,YAAcZ,EAAKW,QAApE,KACA,2BAAG,uBAAGR,OAAO,SAASC,KAAMJ,EAAKE,IAAKP,UAAU,cAA7C,kBAAyE,0BAC3EA,UAAU,mCAtBV,sD,GA3BQkB,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.ba0815fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\titems: [],\n\t\t\tisLoaded: false\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('http://newsapi.org/v2/everything?q=argentina&pageSize=99&language=es&sortBy=publishedAt&apiKey=97488189a6614f30b543d6e0375fa045')\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoaded: true,\n\t\t\t\t\titems: json\n\t\t\t\t})\n\t\t\t});\n\t}\n\n\t\n\n\trender() {\n\t\t\n\t\tvar { isLoaded, items } = this.state;\n\t\tif (!isLoaded) {\n\t\t\treturn <div>Cargando noticias</div>\n\t\t}\n\t\telse {\n\t\t\treturn (\n\t\t\t\t<div className=\"row no-gutters App \">\n\t\t\t\t\t{console.log(items.articles)}\n\t\t\t\t\t{items.articles.map((item) =>\n\t\t\t\t\t\t<div className=\"col-md-4 d-flex\" key={item.url}>\n\t\t\t\t\t\t\t<div className=\"blog-entry ftco-animate\">\n\t\t\t\t\t\t\t\t<a target=\"_blank\" href={item.url} className=\"img\"\n\t\t\t\t\t\t\t\t\tstyle={{ backgroundImage: `url(${item.author==='lanacion.com' ? (\"http://\" + item.urlToImage.slice(29)): item.urlToImage})` }} ></a>\n\t\t\t\t\t\t\t\t<div className=\"text p-4\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"mb-2\"><a target=\"_blank\" href={item.url}>{item.title}</a></h3>\n\t\t\t\t\t\t\t\t\t<div className=\"meta-wrap\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"meta\">\n\t\t\t\t\t\t\t\t\t\t\t<span><i className=\"icon-calendar mr-2\"></i>Sep, 10 2019</span>\n\t\t\t\t\t\t\t\t\t\t\t<span><a href={item.url}><i\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"icon-folder-o mr-2\"></i>Noticias</a></span>\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<p className=\"mb-4\">{item.content=== null ? item.description : item.content} </p>\n\t\t\t\t\t\t\t\t\t<p><a target=\"_blank\" href={item.url} className=\"btn-custom\">Seguir leyendo <span\n\t\t\t\t\t\t\t\t\t\tclassName=\"ion-ios-arrow-forward\"></span></a></p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>)}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}